//
//  CoreDataUtilityStyle.m
//  CoreDataUtilityStyle
//
//  Created by Chris Wilson on 5/29/14.
//  Copyright (c) 2014 mFluent LLC. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "CoreDataUtilityStyle.h"


@implementation CoreDataUtilityStyle

#pragma mark Cache

static NSColor* _brown = nil;
static NSColor* _theTextColor = nil;
static NSColor* _blue = nil;
static NSColor* _gray = nil;
static NSColor* _objectBackground = nil;
static NSColor* _entitySetBorder = nil;

static NSImage* _imageOfFetch = nil;
static NSImage* _imageOfEntity = nil;
static NSImage* _imageOfEntitySet = nil;
static NSImage* _imageOfNumber = nil;
static NSImage* _imageOfBinary = nil;
static NSImage* _imageOfBoolean = nil;
static NSImage* _imageOfDate = nil;
static NSImage* _imageOfAnObject = nil;
static NSImage* _imageOfAString = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _brown = [NSColor colorWithCalibratedRed: 0.725 green: 0.627 blue: 0.541 alpha: 1];
    _theTextColor = [NSColor colorWithCalibratedRed: 1 green: 1 blue: 1 alpha: 1];
    _blue = [NSColor colorWithCalibratedRed: 0.482 green: 0.565 blue: 0.788 alpha: 1];
    _gray = [NSColor colorWithCalibratedRed: 0.647 green: 0.647 blue: 0.647 alpha: 1];
    _objectBackground = [NSColor colorWithCalibratedRed: 0.46 green: 0.541 blue: 0.757 alpha: 1];
    _entitySetBorder = [NSColor colorWithCalibratedRed: 0.238 green: 0.273 blue: 0.367 alpha: 1];

}

#pragma mark Colors

+ (NSColor*)brown { return _brown; }
+ (NSColor*)theTextColor { return _theTextColor; }
+ (NSColor*)blue { return _blue; }
+ (NSColor*)gray { return _gray; }
+ (NSColor*)objectBackground { return _objectBackground; }
+ (NSColor*)entitySetBorder { return _entitySetBorder; }

#pragma mark Drawing Methods

+ (void)drawFetch;
{

    //// Variable Declarations
    NSRect iconFrame = NSMakeRect(0, 0, 14, 14);

    //// Frames
    NSRect frame = NSMakeRect(iconFrame.origin.x, iconFrame.origin.y, iconFrame.size.width, iconFrame.size.height);


    //// Rectangle Drawing
    NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(NSMinX(frame), NSMinY(frame), NSWidth(frame), NSHeight(frame)) xRadius: 2 yRadius: 2];
    [CoreDataUtilityStyle.brown setFill];
    [rectanglePath fill];


    //// Text Drawing
    NSRect textRect = NSMakeRect(NSMinX(frame) + 0.5, NSMinY(frame), NSWidth(frame) - 0.5, NSHeight(frame) - 0.5);
    NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    textStyle.alignment = NSCenterTextAlignment;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [NSFont fontWithName: @"Helvetica" size: 12], NSForegroundColorAttributeName: CoreDataUtilityStyle.theTextColor, NSParagraphStyleAttributeName: textStyle};

    [@"F" drawInRect: NSOffsetRect(textRect, 0, 1) withAttributes: textFontAttributes];
}

+ (void)drawEntity;
{

    //// Variable Declarations
    NSRect iconFrame = NSMakeRect(0, 0, 14, 14);

    //// Frames
    NSRect frame = NSMakeRect(iconFrame.origin.x, iconFrame.origin.y, iconFrame.size.width, iconFrame.size.height);


    //// Rectangle Drawing
    NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(NSMinX(frame), NSMinY(frame), NSWidth(frame), NSHeight(frame)) xRadius: 2 yRadius: 2];
    [CoreDataUtilityStyle.objectBackground setFill];
    [rectanglePath fill];


    //// E Drawing
    NSRect eRect = NSMakeRect(NSMinX(frame) + 0.5, NSMinY(frame), NSWidth(frame) - 0.5, NSHeight(frame) - 0.5);
    NSMutableParagraphStyle* eStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    eStyle.alignment = NSCenterTextAlignment;

    NSDictionary* eFontAttributes = @{NSFontAttributeName: [NSFont fontWithName: @"Helvetica" size: 12], NSForegroundColorAttributeName: CoreDataUtilityStyle.theTextColor, NSParagraphStyleAttributeName: eStyle};

    [@"E" drawInRect: NSOffsetRect(eRect, 0, 1) withAttributes: eFontAttributes];
}

+ (void)drawEntitySet;
{

    //// Variable Declarations
    NSRect iconFrame = NSMakeRect(0, 0, 14, 14);

    //// Frames
    NSRect frame = NSMakeRect(iconFrame.origin.x, iconFrame.origin.y, iconFrame.size.width, iconFrame.size.height);


    //// Rectangle Drawing
    NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRoundedRect: iconFrame xRadius: 2 yRadius: 2];
    [CoreDataUtilityStyle.objectBackground setFill];
    [rectanglePath fill];
    [CoreDataUtilityStyle.entitySetBorder setStroke];
    [rectanglePath setLineWidth: 1];
    [rectanglePath stroke];


    //// Rectangle 2 Drawing
    NSBezierPath* rectangle2Path = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect((iconFrame.origin.x + 1.5), (iconFrame.origin.y - 1.5), iconFrame.size.width, iconFrame.size.height) xRadius: 2 yRadius: 2];
    [CoreDataUtilityStyle.objectBackground setFill];
    [rectangle2Path fill];
    [CoreDataUtilityStyle.entitySetBorder setStroke];
    [rectangle2Path setLineWidth: 1];
    [rectangle2Path stroke];


    //// Rectangle 3 Drawing
    NSBezierPath* rectangle3Path = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect((iconFrame.origin.x + 3.5), (iconFrame.origin.y - 3.5), iconFrame.size.width, iconFrame.size.height) xRadius: 2 yRadius: 2];
    [CoreDataUtilityStyle.objectBackground setFill];
    [rectangle3Path fill];
    [CoreDataUtilityStyle.entitySetBorder setStroke];
    [rectangle3Path setLineWidth: 1];
    [rectangle3Path stroke];


    //// Text Drawing
    NSRect textRect = NSMakeRect(NSMinX(frame) + floor((NSWidth(frame)) * 0.28571 + 0.5), NSMinY(frame) + floor((NSHeight(frame) - 3) * 0.09091 + 0.5), NSWidth(frame) - floor((NSWidth(frame)) * 0.28571 + 0.5), NSHeight(frame) - 3 - floor((NSHeight(frame) - 3) * 0.09091 + 0.5));
    NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    textStyle.alignment = NSCenterTextAlignment;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [NSFont fontWithName: @"Helvetica" size: NSFont.labelFontSize], NSForegroundColorAttributeName: CoreDataUtilityStyle.theTextColor, NSParagraphStyleAttributeName: textStyle};

    [@"E" drawInRect: NSOffsetRect(textRect, 0, 0) withAttributes: textFontAttributes];
}

+ (void)drawNumber;
{

    //// Variable Declarations
    NSRect iconFrame = NSMakeRect(0, 0, 14, 14);

    //// Frames
    NSRect frame = NSMakeRect(iconFrame.origin.x, iconFrame.origin.y, iconFrame.size.width, iconFrame.size.height);


    //// Rectangle Drawing
    NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRoundedRect: iconFrame xRadius: 2 yRadius: 2];
    [CoreDataUtilityStyle.objectBackground setFill];
    [rectanglePath fill];


    //// E Drawing
    NSRect eRect = NSMakeRect(NSMinX(frame) + 0.5, NSMinY(frame), NSWidth(frame) - 0.5, NSHeight(frame) - 0.5);
    NSMutableParagraphStyle* eStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    eStyle.alignment = NSCenterTextAlignment;

    NSDictionary* eFontAttributes = @{NSFontAttributeName: [NSFont fontWithName: @"Helvetica" size: 12], NSForegroundColorAttributeName: CoreDataUtilityStyle.theTextColor, NSParagraphStyleAttributeName: eStyle};

    [@"N" drawInRect: NSOffsetRect(eRect, 0, 1) withAttributes: eFontAttributes];
}

+ (void)drawBinary;
{

    //// Variable Declarations
    NSRect iconFrame = NSMakeRect(0, 0, 14, 14);

    //// Frames
    NSRect frame = NSMakeRect(iconFrame.origin.x, iconFrame.origin.y, iconFrame.size.width, iconFrame.size.height);


    //// Rectangle Drawing
    NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRoundedRect: iconFrame xRadius: 2 yRadius: 2];
    [CoreDataUtilityStyle.objectBackground setFill];
    [rectanglePath fill];


    //// Oval Drawing
    NSBezierPath* ovalPath = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(NSMinX(frame) + 2.5, NSMinY(frame) + NSHeight(frame) - 11.5, 9, 8.5)];
    [CoreDataUtilityStyle.objectBackground setFill];
    [ovalPath fill];
    [CoreDataUtilityStyle.theTextColor setStroke];
    [ovalPath setLineWidth: 1];
    [ovalPath stroke];


    //// Bezier Drawing
    NSBezierPath* bezierPath = NSBezierPath.bezierPath;
    [bezierPath moveToPoint: NSMakePoint(NSMinX(frame) + 7, NSMaxY(frame) - 7.5)];
    [bezierPath curveToPoint: NSMakePoint(NSMinX(frame) + 7, NSMaxY(frame) - 1.5) controlPoint1: NSMakePoint(NSMinX(frame) + 7, NSMaxY(frame) - 1.5) controlPoint2: NSMakePoint(NSMinX(frame) + 7, NSMaxY(frame) - 1.5)];
    [CoreDataUtilityStyle.objectBackground setFill];
    [bezierPath fill];
    [CoreDataUtilityStyle.theTextColor setStroke];
    [bezierPath setLineWidth: 1];
    [bezierPath stroke];
}

+ (void)drawBoolean;
{

    //// Variable Declarations
    NSRect iconFrame = NSMakeRect(0, 0, 14, 14);

    //// Frames
    NSRect frame = NSMakeRect(iconFrame.origin.x, iconFrame.origin.y, iconFrame.size.width, iconFrame.size.height);


    //// Rectangle Drawing
    NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRoundedRect: iconFrame xRadius: 2 yRadius: 2];
    [CoreDataUtilityStyle.objectBackground setFill];
    [rectanglePath fill];


    //// E Drawing
    NSRect eRect = NSMakeRect(NSMinX(frame) + 0.5, NSMinY(frame), NSWidth(frame) - 0.5, NSHeight(frame) - 0.5);
    NSMutableParagraphStyle* eStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    eStyle.alignment = NSCenterTextAlignment;

    NSDictionary* eFontAttributes = @{NSFontAttributeName: [NSFont fontWithName: @"Helvetica" size: 12], NSForegroundColorAttributeName: CoreDataUtilityStyle.theTextColor, NSParagraphStyleAttributeName: eStyle};

    [@"B" drawInRect: NSOffsetRect(eRect, 0, 1) withAttributes: eFontAttributes];
}

+ (void)drawDate;
{

    //// Variable Declarations
    NSRect iconFrame = NSMakeRect(0, 0, 14, 14);

    //// Frames
    NSRect frame = NSMakeRect(iconFrame.origin.x, iconFrame.origin.y, iconFrame.size.width, iconFrame.size.height);


    //// Rectangle Drawing
    NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRoundedRect: iconFrame xRadius: 2 yRadius: 2];
    [CoreDataUtilityStyle.objectBackground setFill];
    [rectanglePath fill];


    //// E Drawing
    NSRect eRect = NSMakeRect(NSMinX(frame) + 0.5, NSMinY(frame), NSWidth(frame) - 0.5, NSHeight(frame) - 0.5);
    NSMutableParagraphStyle* eStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    eStyle.alignment = NSCenterTextAlignment;

    NSDictionary* eFontAttributes = @{NSFontAttributeName: [NSFont fontWithName: @"Helvetica" size: 12], NSForegroundColorAttributeName: CoreDataUtilityStyle.theTextColor, NSParagraphStyleAttributeName: eStyle};

    [@"D" drawInRect: NSOffsetRect(eRect, 0, 1) withAttributes: eFontAttributes];
}

+ (void)drawAnObject;
{

    //// Variable Declarations
    NSRect iconFrame = NSMakeRect(0, 0, 14, 14);

    //// Frames
    NSRect frame = NSMakeRect(iconFrame.origin.x, iconFrame.origin.y, iconFrame.size.width, iconFrame.size.height);


    //// Rectangle Drawing
    NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRoundedRect: iconFrame xRadius: 2 yRadius: 2];
    [CoreDataUtilityStyle.objectBackground setFill];
    [rectanglePath fill];


    //// E Drawing
    NSRect eRect = NSMakeRect(NSMinX(frame) + 0.5, NSMinY(frame), NSWidth(frame) - 0.5, NSHeight(frame) - 0.5);
    NSMutableParagraphStyle* eStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    eStyle.alignment = NSCenterTextAlignment;

    NSDictionary* eFontAttributes = @{NSFontAttributeName: [NSFont fontWithName: @"Helvetica" size: 12], NSForegroundColorAttributeName: CoreDataUtilityStyle.theTextColor, NSParagraphStyleAttributeName: eStyle};

    [@"O" drawInRect: NSOffsetRect(eRect, 0, 1) withAttributes: eFontAttributes];
}

+ (void)drawAString;
{

    //// Variable Declarations
    NSRect iconFrame = NSMakeRect(0, 0, 14, 14);

    //// Frames
    NSRect frame = NSMakeRect(iconFrame.origin.x, iconFrame.origin.y, iconFrame.size.width, iconFrame.size.height);


    //// Rectangle Drawing
    NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRoundedRect: iconFrame xRadius: 2 yRadius: 2];
    [CoreDataUtilityStyle.objectBackground setFill];
    [rectanglePath fill];


    //// E Drawing
    NSRect eRect = NSMakeRect(NSMinX(frame) + 0.5, NSMinY(frame), NSWidth(frame) - 0.5, NSHeight(frame) - 0.5);
    NSMutableParagraphStyle* eStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    eStyle.alignment = NSCenterTextAlignment;

    NSDictionary* eFontAttributes = @{NSFontAttributeName: [NSFont fontWithName: @"Helvetica" size: 12], NSForegroundColorAttributeName: CoreDataUtilityStyle.theTextColor, NSParagraphStyleAttributeName: eStyle};

    [@"S" drawInRect: NSOffsetRect(eRect, 0, 1) withAttributes: eFontAttributes];
}

#pragma mark Generated Images

+ (NSImage*)imageOfFetch;
{
    if (_imageOfFetch)
        return _imageOfFetch;

    _imageOfFetch = [NSImage imageWithSize: NSMakeSize(14, 14) flipped: NO drawingHandler: ^(NSRect dstRect)
    {
        [CoreDataUtilityStyle drawFetch];
        return YES;
    }];

    return _imageOfFetch;
}

+ (NSImage*)imageOfEntity;
{
    if (_imageOfEntity)
        return _imageOfEntity;

    _imageOfEntity = [NSImage imageWithSize: NSMakeSize(14, 14) flipped: NO drawingHandler: ^(NSRect dstRect)
    {
        [CoreDataUtilityStyle drawEntity];
        return YES;
    }];

    return _imageOfEntity;
}

+ (NSImage*)imageOfEntitySet;
{
    if (_imageOfEntitySet)
        return _imageOfEntitySet;

    _imageOfEntitySet = [NSImage imageWithSize: NSMakeSize(14, 14) flipped: NO drawingHandler: ^(NSRect dstRect)
    {
        [CoreDataUtilityStyle drawEntitySet];
        return YES;
    }];

    return _imageOfEntitySet;
}

+ (NSImage*)imageOfNumber;
{
    if (_imageOfNumber)
        return _imageOfNumber;

    _imageOfNumber = [NSImage imageWithSize: NSMakeSize(14, 14) flipped: NO drawingHandler: ^(NSRect dstRect)
    {
        [CoreDataUtilityStyle drawNumber];
        return YES;
    }];

    return _imageOfNumber;
}

+ (NSImage*)imageOfBinary;
{
    if (_imageOfBinary)
        return _imageOfBinary;

    _imageOfBinary = [NSImage imageWithSize: NSMakeSize(14, 14) flipped: NO drawingHandler: ^(NSRect dstRect)
    {
        [CoreDataUtilityStyle drawBinary];
        return YES;
    }];

    return _imageOfBinary;
}

+ (NSImage*)imageOfBoolean;
{
    if (_imageOfBoolean)
        return _imageOfBoolean;

    _imageOfBoolean = [NSImage imageWithSize: NSMakeSize(14, 14) flipped: NO drawingHandler: ^(NSRect dstRect)
    {
        [CoreDataUtilityStyle drawBoolean];
        return YES;
    }];

    return _imageOfBoolean;
}

+ (NSImage*)imageOfDate;
{
    if (_imageOfDate)
        return _imageOfDate;

    _imageOfDate = [NSImage imageWithSize: NSMakeSize(14, 14) flipped: NO drawingHandler: ^(NSRect dstRect)
    {
        [CoreDataUtilityStyle drawDate];
        return YES;
    }];

    return _imageOfDate;
}

+ (NSImage*)imageOfAnObject;
{
    if (_imageOfAnObject)
        return _imageOfAnObject;

    _imageOfAnObject = [NSImage imageWithSize: NSMakeSize(14, 14) flipped: NO drawingHandler: ^(NSRect dstRect)
    {
        [CoreDataUtilityStyle drawAnObject];
        return YES;
    }];

    return _imageOfAnObject;
}

+ (NSImage*)imageOfAString;
{
    if (_imageOfAString)
        return _imageOfAString;

    _imageOfAString = [NSImage imageWithSize: NSMakeSize(14, 14) flipped: NO drawingHandler: ^(NSRect dstRect)
    {
        [CoreDataUtilityStyle drawAString];
        return YES;
    }];

    return _imageOfAString;
}

@end
